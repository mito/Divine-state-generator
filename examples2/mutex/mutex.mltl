default(N,3)

********************
Atomic propositions:
********************

define(ac,`#define a_$1 (active == $1)')
define(act,`a_$1')

define(wa,`#define w_$1 (waiting[$1] == 1)')
define(wai,`w_$1')

define(cr,`#define c_$1 (P_$1.CS)')
define(cri,`c_$1')

forloop(i,0,decr(N),`ac(i)
')
forloop(i,0,decr(N),`wa(i)
')
forloop(i,0,decr(N),`cr(i)
')

#define in_cs (in_critical > 1)

********************
Formulas
********************

1) naive: if a process waits for CS then it is eventually in CS

  #property myloop(i,0,decr(N),` (G((wai(i)) -> ((wai(i)) U (cri(i)))))',`&&')

2) for each process holds that if the process is active i. o. then 1 ...

  #property myloop(i,0,decr(N),` ((G(F(act(i)))) -> G(wai(i) -> ((wai(i)) U (cri(i)))))',`&&')

**********************************************************************************************

3) naive: each process is i. o. in CS

  #property myloop(i,0,decr(N),` G(F(cri(i)))',`&&')

4) (almost naive) for each process holds that if the process is active i. o. then it is in CS i. o.

  #property myloop(i,0,decr(N),` ((G(F(act(i)))) -> G(F(cri(i))))',`&&')

5) for each process holds that if the process is waiting i. o. and is active i. o. then it is in CS i. o.

  #property myloop(i,0,decr(N),` ((G(F(act(i) && wai(i)))) -> G(F(cri(i))))',`&&')

**********************************************************************************************

6) mutual excluxion

  #property G(!in_cs)

**********************************************************************************************

7) For all processes hold that if the process 0 waits for CS then the other process can be in CS at most once before the proces 0 is in CS.

  #property myloop(i,1,decr(N),`  G( !( (wai(0)) U ( ((cri(i)) && (wai(0))) && ((wai(0)) U ( ((wai(0)) && (wai(i))) && ((wai(0)) U (cri(i))))))))',`&&')








