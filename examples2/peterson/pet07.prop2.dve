
// peterson mutual exclusion protocol for N processes

byte pos[7];
byte step[7];
byte in_critical = 0;

process P_0 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[0] = j; },
 q2 -> q3 { effect step[j-1] = 0, k = 0; },
 q3 -> q3 { guard (k == 0 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 0 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[0] = 0, in_critical = in_critical-1, j=0;};
}
process P_1 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[1] = j; },
 q2 -> q3 { effect step[j-1] = 1, k = 0; },
 q3 -> q3 { guard (k == 1 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 1 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[1] = 0, in_critical = in_critical-1, j=0;};
}
process P_2 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[2] = j; },
 q2 -> q3 { effect step[j-1] = 2, k = 0; },
 q3 -> q3 { guard (k == 2 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 2 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[2] = 0, in_critical = in_critical-1, j=0;};
}
process P_3 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[3] = j; },
 q2 -> q3 { effect step[j-1] = 3, k = 0; },
 q3 -> q3 { guard (k == 3 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 3 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[3] = 0, in_critical = in_critical-1, j=0;};
}
process P_4 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[4] = j; },
 q2 -> q3 { effect step[j-1] = 4, k = 0; },
 q3 -> q3 { guard (k == 4 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 4 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[4] = 0, in_critical = in_critical-1, j=0;};
}
process P_5 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[5] = j; },
 q2 -> q3 { effect step[j-1] = 5, k = 0; },
 q3 -> q3 { guard (k == 5 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 5 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[5] = 0, in_critical = in_critical-1, j=0;};
}
process P_6 {
byte j=0, k=0;
state NCS, CS, wait ,q2,q3;
init NCS;
trans
 
 NCS -> wait { effect j = 1; },
 wait -> q2  { guard j < 7; effect pos[6] = j; },
 q2 -> q3 { effect step[j-1] = 6, k = 0; },
 q3 -> q3 { guard (k == 6 || pos[k]< j) && k < 7; effect k = k+1; },
 q3 -> wait { guard step[j-1] != 6 || k == 7; effect j = j+1, k=0; },
 wait -> CS { guard j == 7; effect in_critical = in_critical+1;},
 CS -> NCS { effect pos[6] = 0, in_critical = in_critical-1, j=0;};
}

process LTL_property {
state q1, q2;
init q1;
accept q2;
trans
q1 -> q2 { guard not P_0.CS; },
q1 -> q1 {},
q2 -> q2 { guard not P_0.CS; };
}

system async property LTL_property;
