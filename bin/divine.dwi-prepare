#!/usr/bin/perl
use strict;

## helper functions to process input from the server
sub chop {
	($_) = @_;
	my %o;
	for (split /\n/) {
		my ($k, @v) = split (/: /);
        $o{$k} .= (join ": ", @v);
		$o{$k} .= "\n";
	}
	chomp $o{$_} for (keys %o);
    return \%o;
}

sub chopfile {
	my ($f) = @_;
	my $in;
	open I, "$f";
	$in .= $_ while (<I>);
	close I;
	return &chop( $in );
}

sub writefile {
	my ($f, $c) = @_;
	open O, ">$f";
	print O "$c\n";
	close O;
}

my $binpref = 'divine.';
$binpref = "divine." if ( $binpref eq '@BIN'.'PREFIX@' );

## parse commandline, read input
my %ARG;
for (@ARGV) {
	my ($a, $v) = split (/=/);
    $a =~ s/^--//;
	$ARG{$a} = $v;
}

my $arg = &chopfile( $ARG{args} );
my $input = &chopfile( $ARG{input} );
my $alg = $ARG{exec};
my $out = $ARG{output};
my $bin = "$binpref$alg";
my $wd = $ARG{workdir};
my $pwd = `pwd`;
my $pbs = 0;
$pbs = 1 if ($ARG{mode} eq "pbs");

chomp $pwd;
$pwd =~ s,/mnt/sda1/home/divineuser/,/home/divineuser/,; ## XXX site-specific hack
my $algin = "dwi-prepare.error";

## print out preamble of the driver script
open SCRIPT, ">$out.worker";
print SCRIPT "#!/bin/sh\n";

my $jobname = "unknown";
$jobname = $$arg{jobname} if ( $$arg{jobname} );
$jobname =~ s/[ \t]/_/g;

if ($pbs) {
    my $wt = "10:00";
    $wt = $$arg{walltime} if ( $$arg{walltime} );
    print SCRIPT "#PBS -l walltime=$wt,nodes=$$arg{machines}\n";
    print SCRIPT "cd $pwd\n";
}

print SCRIPT "date > started\n";

## no pbs, assign machines manually
if (!$pbs) {
    open MF, ">machinefile";
    print MF $$arg{mf}."\n";
    close( MF );
}

my $first = (split /\n/, $$arg{mf})[0];

## write out the prepare input files phase
if ($$input{"model-type"} eq "dve" && $$input{"property-type"} eq "ltl") {
	writefile( "$wd/model.dve", $$input{model} );
	writefile( "$wd/property.ltl", $$input{property} );
	print SCRIPT "${binpref}combine -p 1 -o $wd/model.dve $wd/property.ltl";
	print SCRIPT " > $wd/combined.dve 2> combine-stderr\n";
	$algin = "$wd/combined.dve";
} else {
	my ($ex, $out);
    ($ex, $out) = (".mdve", ".dve") if $$input{"model-type"} eq "dve";
    ($ex, $out) = (".pml", ".b" ) if $$input{"model-type"} eq "pml";
	if ($out eq ".b") {
		writefile( "$wd/model$ex", $$input{model} );
		print SCRIPT "mkdir -p $wd/binary/\n";
		print SCRIPT "cp $wd/model$ex $wd/binary/model$ex\n";
		print SCRIPT "${binpref}pml2s.sh $wd/binary/model$ex >& pml2s.output\n";
		print SCRIPT "${binpref}nips_asm.pl $wd/binary/model.pml.s "
			. "$wd/binary/model$out >& nips_asm.output\n";
		$algin = "$wd/binary/model$out";
	} else {
		writefile( "$wd/model$out", $$input{model} ); # XXX
		$algin = "$wd/model$out";
	}
    # print SCRIPT "${binpref}preprocessor $wd/model$ex > $wd/model$out\n";
}

## nastaveni flagu pro algoritmus
my @algargs;
# translate dwi algorithm arguments to switches
push @algargs, "-X $pwd/work/algorithm";
#push @algargs, "-"; # if ($$arg{statistics} eq "true");
push @algargs, "-S"; # if ($$arg{statistics} eq "true");
push @algargs, "-L"; # if ($$arg{log} eq "true");
push @algargs, "-r"; # if ($$arg{report} eq "true");
push @algargs, "-t" unless ($$input{"property-type"} eq "statespace"); # ... produce counterexample trail
push @algargs, "-c"; # ... produce a list of counterexample states
push @algargs, "-H $$arg{hashsize}" if ($$arg{hashsize});
push @algargs, "-u -a -d" if ($$input{"property-type"} eq "statespace");
$$arg{machines} = 1 unless ($$arg{machines});

push @algargs, "$pwd/$algin";

mkdir $wd;
open LAUNCH, ">$out";
print LAUNCH "#!/bin/sh\n";

sub escape { # XXX
	($_) = @_;
	s/(["$`])/\\$1/g;
	return $_;
}

for my $k (keys %$arg) {
	$$arg{$k} = escape( $$arg{$k} );
}

my $binpath = `which $bin`;
chomp $binpath;

print SCRIPT '
mkdir -p work

while ! test -f finished; do
    sleep 1;
    for i in `seq 0 9`; do for j in `seq 0 9`; do
        test -f work/algorithm.$i$j && head -n4 \
            work/algorithm.$i$j > algorithm.$i$j && \
        tail -n4 work/algorithm.$i$j | egrep -v \'^#\' >> algorithm.$i$j;
    done; done;
done &
';

print SCRIPT "# run $bin\n";
if ($pbs) {
    print SCRIPT "mpiexec $binpath " . (join " ", @algargs) .
        " > algorithm-stdout 2> algorithm-stderr\n";
} else {
    print SCRIPT "ssh $first mpirun -machinefile $pwd/machinefile -np $$arg{machines} "
        . " $binpath " . (join " ", @algargs) . " > algorithm-stdout 2> algorithm-stderr\n";
}

## postprocess the output data
print SCRIPT "cp -f work/algorithm.report algorithm.report\n";
print SCRIPT "if test -e work/algorithm.trail && test -e work/algorithm.ce_states; then\n";
print SCRIPT "     divine.code_positions work/algorithm.trail $wd/model.dve algorithm.cetrace\n";
print SCRIPT "     divine.reformat_ce_states work/algorithm.ce_states algorithm.cestates\n";
print SCRIPT "else\n";
print SCRIPT "     echo \"### NO COUNTEREXAMPLE ###\" > algorithm.cetrace \n";
print SCRIPT "     echo \"\" > algorithm.cestates\n";
print SCRIPT "fi\n";
print SCRIPT "date > finished\n";
print SCRIPT "wait\n";

close (SCRIPT);
## end of driver script

## write out the launcher script
if ($pbs) {
    print LAUNCH "ID=\`qsub -N \"$jobname\" $out.worker\ 2> qsub-stderr`\n";
    print LAUNCH "echo \$ID > pbs-job-id\n";
    print LAUNCH "while qstat \$ID >& /dev/null; do sleep 60; done\n";
} else {
    print LAUNCH "exec $out.worker\n";
}

close (LAUNCH);

## make the scripts executable
chmod 0755, "$out";
chmod 0755, "$out.worker";

