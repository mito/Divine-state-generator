
// puzzle with soldiers going over bridge, N soldiers, MAX time
// individual times are (first four values are classical, others are rather arbitrary...):

divert(-1)
define(T1, 5)
define(T2, 10)
define(T3, 20)
define(T4, 25)
define(T5, 30)
define(T6, 30)
define(T7, 40)
define(T8, 45)

default(N, 4)
default(MAX, 60)
divert

channel wanna_go, lets_go;
byte total_time=0, where_is_torch =0;

process torch {
byte time1, time2;
state free, one, two, going;
init free;
trans
 free -> one { sync wanna_go?time1;},
 one -> two {sync wanna_go?time2;},
 one -> going {},
 two -> going { guard time1>= time2; sync lets_go!;},
 two -> going { guard time1 <time2; sync lets_go!; effect time1 = time2, time2=0;},
 going -> free {guard total_time+time1 <= MAX;
		sync lets_go!;
		effect total_time=total_time+time1, time1=0, where_is_torch = 1 -where_is_torch;}; 
}

define(Soldier, `process soldier_$1 {
state left, go_right, right, go_left;
init left;
trans
 left -> go_right { guard where_is_torch == 0; sync wanna_go!$2; },
 go_right -> right { sync lets_go?; },
 right -> go_left { guard where_is_torch == 1; sync wanna_go!$2; },
 go_left -> left { sync lets_go?; };
}

')

forloop(j,1,N, `Soldier(j, `T'j)')

system async;