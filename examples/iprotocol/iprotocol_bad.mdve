
// 2 parameters:
default(SEQ, 4)
default(W, 2)

channel Get, Put, SAck, SNak, SData, RAck, RNak, RData, RCorrData, Timeout;


process Timer {
state tick;
init tick;
trans
    tick -> tick { sync Timeout!; };
}

process Producer{
byte message=0;
state wait,produce;
init wait;
trans
  wait    -> produce {},
  produce -> wait {sync Get!message;
                      effect message = (message+1)%SEQ;};
}

process Consumer{
byte message;
state wait, consume;
init wait;
trans
  wait    -> consume {sync Put?message;},
  consume -> wait {};
}



process Medium {
byte value;
state wait, data, ack, nak;
init wait;
trans
    wait -> data { sync SData?value; },
    data -> wait { sync RData!value; },
    data -> wait { sync RCorrData!value; },
    data -> wait {},
    wait -> ack  { sync RAck?value; },
    ack  -> wait { sync SAck!value; },
    ack  -> wait {},
    wait -> nak  { sync RNak?value; }, 
    nak  -> wait { sync SNak!value; },
    nak  -> wait {};
}
 
process Sender{
byte sendseq=1, rack=0, value;
state wait, data, ack, nak, timeout;
init wait;
trans
    wait    -> ack     {sync SAck?value; },
    wait    -> nak     {sync SNak?value; },
    wait    -> timeout {sync Timeout?;},
    wait    -> data    {guard (rack + W)%SEQ >sendseq;
                     sync Get?value; },
    ack     -> wait    {guard (rack<sendseq && rack < value && value < sendseq) ||
                              (rack>sendseq && sendseq < value && value < rack);
                        effect rack = value;},
    ack     -> wait    {guard (rack>=sendseq || rack >= value || value >= sendseq) &&
                              (rack<=sendseq || sendseq >= value || value >= rack);},
    nak     -> wait    {guard (rack<sendseq && rack < value && value < sendseq) ||
                              (rack>sendseq && sendseq < value && value < rack);
                        sync SData!value;},
    nak     -> wait    {guard (rack>=sendseq || rack >= value || value >= sendseq) &&
                              (rack<=sendseq || sendseq >= value || value >= rack);},
    timeout -> wait    {guard (rack+1)%SEQ != sendseq;
                        sync SData!(rack+1)%SEQ;},
    timeout -> wait    {guard (rack+1)%SEQ == sendseq;},
    data    -> wait    {sync SData!sendseq;
                        effect sendseq = (sendseq+1)%SEQ;};
}

process Receiver{
byte i, value, sent=0, recseq=0, lack=0, recbuf[SEQ]=0, nakd[SEQ]=0;
state wait, data, put_data, send_naks, corr_data, on_timeout;
init wait;
trans 
    wait      -> data        {sync RData?value; },
    wait      -> corr_data   {sync RCorrData?value; },
    wait      -> on_timeout  {sync Timeout?; 
                              effect i=0;},
    data      -> send_naks   {guard value != (recseq+1)%SEQ;
                              effect recbuf[value]=1, i=(recseq+1)%SEQ;},
    data      -> put_data    {guard value == (recseq+1)%SEQ;
                              sync Put!value;
                              effect recseq=(recseq+1)%SEQ, sent=(sent+1)%SEQ;},
    send_naks -> send_naks   {guard i != value && nakd[i]==1;
                              effect i = (i+1)%SEQ;},
    send_naks -> send_naks   {guard i != value && nakd[i]==0;
                              sync RNak!i;
                              effect nakd[i]=1,i = (i+1)%SEQ;},
    send_naks -> wait        {guard i==value;},
    put_data  -> put_data    {guard sent== W/2;
                              sync RAck!recseq;
                              effect lack=recseq, sent=0;},
    put_data  -> put_data    {guard sent != W/2 && recbuf[(recseq+1)%SEQ]==1;
                              sync Put!(recseq+1)%SEQ;
                              effect recseq = (recseq+1)%SEQ, recbuf[recseq]=0;},
    put_data  -> wait        {guard sent != W/2 && recbuf[(recseq+1)%SEQ]==0;},
    corr_data -> wait        {guard nakd[value]==0;
                              sync RNak!value;},
    corr_data -> wait        {guard nakd[value]==1;},
    on_timeout-> on_timeout  {guard i<SEQ;
                              effect nakd[i]=0, i=i+1;},
    on_timeout-> wait        {guard i==SEQ;
                              sync RNak!(recseq+1)%SEQ;
                              effect nakd[(recseq+1)%SEQ]=1;};
}

system async;











