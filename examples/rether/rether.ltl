{ reservation => granted in next cycle
{ G (res0 -> (! cend U (cend U (!cend && (rt0 R !cend))))) }
res0 := Node_0.reserved;
cend := Token.cycle_end;
rt0 := Node_0.RT_action;
}

{ want => granted in next cycle
{ G (want0 -> (! cend U (cend U (!cend && (rt0 R !cend))))) }
want0 := Node_0.want_RT;
cend := Token.cycle_end;
rt0 := Node_0.RT_action;
}

{ reservation => granted in this cycle
{ G (res0 ->  (rt0 R !cend)) }
res0 := Node_0.reserved;
cend := Token.cycle_end;
rt0 := Node_0.RT_action;
}

{ always some more NRT action
{ GF a }
a:=Node_0.NRT_action;
}

{ always some more RT action
{ GF a }
a:= Node_0.RT_action;
}

